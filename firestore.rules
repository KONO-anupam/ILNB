rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    // Helper function to check if user is authenticated
    function isAuthenticated() {
      return request.auth != null;
    }
    
    // Helper function to check if the user is accessing their own data
    function isOwner(userId) {
      return isAuthenticated() && request.auth.uid == userId;
    }
    
    // Helper function to validate transaction data
    function isValidTransaction(data) {
      return data.userId == request.auth.uid 
        && data.assetId is string
        && data.assetName is string
        && data.assetType is string
        && data.transactionType in ['buy', 'sell']
        && data.quantity is number
        && data.amount is number
        && data.timestamp is timestamp;
    }

    // Users collection rules
    match /users/{userId} {
      allow read: if isOwner(userId);
      allow create: if isAuthenticated() && request.auth.uid == userId;
      allow update: if isOwner(userId);
      allow delete: if isOwner(userId);
      
      // Nested collections under user document
      match /{document=**} {
        allow read: if isOwner(userId);
        allow write: if isOwner(userId);
      }
    }
    
    // Transactions collection rules
    match /transactions/{transactionId} {
      // Allow users to read only their own transactions
      allow read: if isAuthenticated() && resource.data.userId == request.auth.uid;
      
      // Allow users to create transactions only for themselves with valid data
      allow create: if isAuthenticated() 
        && request.resource.data.userId == request.auth.uid
        && isValidTransaction(request.resource.data);
      
      // Disallow updates to existing transactions (for integrity)
      allow update: if false;
      
      // Allow users to delete only their own transactions
      allow delete: if isAuthenticated() && resource.data.userId == request.auth.uid;
    }
  }
} 